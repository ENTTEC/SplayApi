namespace SplayApi;

enum COMMAND : uint8 {
  PLAY = 0, // Play playlist on the device
  PAUSE = 1, // Pause the playing playlist
  STOP = 2, // Stop the playlist is in PAUSE or PLAY status.
  GET_PLAYLIST = 3, // Get full information about playlist with Tracks, Triggers & Events
  UPDATE_PLAYLISTS_ORDER = 4, // Update playlists by ids with given orders
  PLAY_ALL_PLAYLISTS = 5, // Play all playlists on the device
  PAUSE_ALL_PLAYLISTS = 6, // Pause all playing playlists
  STOP_ALL_PLAYLISTS = 7, // Stop all playlists is in PAUSE or PLAY status.
  GET_ALL_PLAYLISTS = 8, // Get status of all currently playing playlists
  SET_PLAYLIST_INTENSITY = 9, // Output intensity (Master Fader) of the given playlist, persists until power cycle
  GET_PLAYLIST_INTENSITY = 10, // Return the current Intensity
  SET_TRACK_INTENSITY = 11, // Output intensity of particular track in the given playlist (not implemented)
  GET_TRACK_INTENSITY = 12, // Return the current Intensity (not implemented)

  CAPTURE_DMX_FRAME = 13, // Static frame recording
  RECORD_DMX_FRAME = 14, // Dynamic frame recording
  STOP_RECORD = 15, // Stop any recording
  SAVE_CUE = 16, // Save cue state
  DELETE_CUE = 17, // Delete Cue by id

  UPDATE_PLAYLIST = 18, // Update/Create Playlist with json struct as gets from GET_PLAYLIST
  DELETE_PLAYLIST = 19, // Delete Playlist by id

  UPDATE_SETTING = 20, // Update Setting by id
  GET_SETTING = 21, // Get Setting by id

  SET_PLAYLIST_TIME_POSITION = 22, // Set playback position of a playlist
  SET_WEBSOCKET_INPUT = 23, // Sets universe to monitor in Cue recording, use Universe number or WEBSOCKET_OUTPUT:NOTHING/ALL

  PLAY_CUE = 25, // Play cue with given id
  PAUSE_CUE = 26, // Pause cue with given id
  STOP_CUE = 27, // Stop playback of playing cue by given id
  GET_CUE = 28, // Get full info on cue by given id
  GET_ALL_CUES = 29, // Get list of all cues
  EXIT_CUE_EDIT = 30, // Frontend notifies on Cue editing finished

  UPDATE_STORAGE_PATH = 34, // Update storage path using internal DB check for BASE_PATH setting

  GET_EVENT = 36, // Get Event by id
  GET_ALL_EVENTS = 37, // Get all existing Events
  UPDATE_EVENT = 38, // Update/Create Event
  DELETE_EVENT = 39, // Delete Event by id
  GET_TRIGGER = 40, // Get Trigger by id
  GET_ALL_TRIGGERS = 41, // Get all existing Triggers
  UPDATE_TRIGGER = 42, // Update/Create Trigger
  DELETE_TRIGGER = 43, // Delete Trigger by id
  SEND_EVENT = 44, // Send given event
  WAIT_TRIGGER = 45, // Add trigger to check
  CHECK_TRIGGER = 46, // Check if added trigger happen

  UDP_MESSAGE = 50, // Accepts messages to interpret as UDP input
  OSC_MESSAGE = 51, // Accepts messages to interpret as OSC input

  GET_MASTER_INTENSITY = 55, // Get / Set overall S-Play output intensity (Master Fader), persists until power cycle
  SET_MASTER_INTENSITY = 56,

  GET_SCHEDULES = 60, // Get all existing Schedules
  UPDATE_SCHEDULE = 61, // Update Schedule to file already exist.
  DELETE_SCHEDULE = 62, // Delete Schedule. it will be removed from database and storage.
  ENABLE_SCHEDULE = 63, // Change the Schedule state enable ACTIVE = 1 / PAUSED = 2

  GET_INTERFACE = 70, // Get Iterface page by id or URL
  GET_ALL_INTERFACES = 71, // Get all created Interfaces
  UPDATE_INTERFACE = 72, // Update/Create Interface page
  DELETE_INTERFACE = 73, // Delete Interface by id

  GET_VERSION = 80,
  GET_NETWORK = 81,
  SET_NETWORK = 82,
  GET_TIME = 83,
  SET_TIME = 84,
  GET_STORAGES = 85,
  SELECT_STORAGE = 86,
  FACTORY_RESET = 87,

  REFRESH_SETTING = 254,
}
