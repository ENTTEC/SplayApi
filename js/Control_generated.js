// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var SplayApi = SplayApi || {};

/**
 * @enum {number}
 */
SplayApi.CONTROL_TYPE = {
  TRIGGER: 0,
  EVENT: 1
};

/**
 * @enum {string}
 */
SplayApi.CONTROL_TYPEName = {
  '0': 'TRIGGER',
  '1': 'EVENT'
};

/**
 * @enum {number}
 */
SplayApi.TRIGGER_TYPE = {
  NONE: 0,
  OSC: 1,
  RS232: 2,
  IO: 3,
  ARTNET: 4,
  DMX: 5,
  SACN: 6,
  POWERUP: 7,
  UDP: 8,
  BUTTON: 9
};

/**
 * @enum {string}
 */
SplayApi.TRIGGER_TYPEName = {
  '0': 'NONE',
  '1': 'OSC',
  '2': 'RS232',
  '3': 'IO',
  '4': 'ARTNET',
  '5': 'DMX',
  '6': 'SACN',
  '7': 'POWERUP',
  '8': 'UDP',
  '9': 'BUTTON'
};

/**
 * @enum {number}
 */
SplayApi.EVENT_TYPE = {
  NONE: 0,
  RS232: 1,
  IO: 2,
  ARTNET: 3,
  DMX: 4,
  SACN: 5,
  OSC: 6,
  UDP: 7
};

/**
 * @enum {string}
 */
SplayApi.EVENT_TYPEName = {
  '0': 'NONE',
  '1': 'RS232',
  '2': 'IO',
  '3': 'ARTNET',
  '4': 'DMX',
  '5': 'SACN',
  '6': 'OSC',
  '7': 'UDP'
};

/**
 * @constructor
 */
SplayApi.TriggerTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.TriggerTable}
 */
SplayApi.TriggerTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.TriggerTable=} obj
 * @returns {SplayApi.TriggerTable}
 */
SplayApi.TriggerTable.getRootAsTriggerTable = function(bb, obj) {
  return (obj || new SplayApi.TriggerTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.TriggerTable=} obj
 * @returns {SplayApi.TriggerTable}
 */
SplayApi.TriggerTable.getSizePrefixedRootAsTriggerTable = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.TriggerTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.TriggerTable.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.TriggerTable.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {SplayApi.TRIGGER_TYPE}
 */
SplayApi.TriggerTable.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {SplayApi.TRIGGER_TYPE} */ (this.bb.readUint8(this.bb_pos + offset)) : SplayApi.TRIGGER_TYPE.NONE;
};

/**
 * @returns {boolean}
 */
SplayApi.TriggerTable.prototype.active = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.TriggerTable.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SplayApi.TriggerTable.prototype.start = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.TriggerTable.startTriggerTable = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
SplayApi.TriggerTable.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
SplayApi.TriggerTable.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {SplayApi.TRIGGER_TYPE} type
 */
SplayApi.TriggerTable.addType = function(builder, type) {
  builder.addFieldInt8(2, type, SplayApi.TRIGGER_TYPE.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} active
 */
SplayApi.TriggerTable.addActive = function(builder, active) {
  builder.addFieldInt8(3, +active, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
SplayApi.TriggerTable.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(4, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} start
 */
SplayApi.TriggerTable.addStart = function(builder, start) {
  builder.addFieldInt32(5, start, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.TriggerTable.endTriggerTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {flatbuffers.Offset} nameOffset
 * @param {SplayApi.TRIGGER_TYPE} type
 * @param {boolean} active
 * @param {flatbuffers.Offset} valueOffset
 * @param {number} start
 * @returns {flatbuffers.Offset}
 */
SplayApi.TriggerTable.createTriggerTable = function(builder, id, nameOffset, type, active, valueOffset, start) {
  SplayApi.TriggerTable.startTriggerTable(builder);
  SplayApi.TriggerTable.addId(builder, id);
  SplayApi.TriggerTable.addName(builder, nameOffset);
  SplayApi.TriggerTable.addType(builder, type);
  SplayApi.TriggerTable.addActive(builder, active);
  SplayApi.TriggerTable.addValue(builder, valueOffset);
  SplayApi.TriggerTable.addStart(builder, start);
  return SplayApi.TriggerTable.endTriggerTable(builder);
}

/**
 * @constructor
 */
SplayApi.EventTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.EventTable}
 */
SplayApi.EventTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.EventTable=} obj
 * @returns {SplayApi.EventTable}
 */
SplayApi.EventTable.getRootAsEventTable = function(bb, obj) {
  return (obj || new SplayApi.EventTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.EventTable=} obj
 * @returns {SplayApi.EventTable}
 */
SplayApi.EventTable.getSizePrefixedRootAsEventTable = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.EventTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.EventTable.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.EventTable.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {SplayApi.EVENT_TYPE}
 */
SplayApi.EventTable.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {SplayApi.EVENT_TYPE} */ (this.bb.readUint8(this.bb_pos + offset)) : SplayApi.EVENT_TYPE.NONE;
};

/**
 * @returns {boolean}
 */
SplayApi.EventTable.prototype.active = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.EventTable.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SplayApi.EventTable.prototype.start = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.EventTable.startEventTable = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
SplayApi.EventTable.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
SplayApi.EventTable.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {SplayApi.EVENT_TYPE} type
 */
SplayApi.EventTable.addType = function(builder, type) {
  builder.addFieldInt8(2, type, SplayApi.EVENT_TYPE.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} active
 */
SplayApi.EventTable.addActive = function(builder, active) {
  builder.addFieldInt8(3, +active, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
SplayApi.EventTable.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(4, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} start
 */
SplayApi.EventTable.addStart = function(builder, start) {
  builder.addFieldInt32(5, start, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.EventTable.endEventTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {flatbuffers.Offset} nameOffset
 * @param {SplayApi.EVENT_TYPE} type
 * @param {boolean} active
 * @param {flatbuffers.Offset} valueOffset
 * @param {number} start
 * @returns {flatbuffers.Offset}
 */
SplayApi.EventTable.createEventTable = function(builder, id, nameOffset, type, active, valueOffset, start) {
  SplayApi.EventTable.startEventTable(builder);
  SplayApi.EventTable.addId(builder, id);
  SplayApi.EventTable.addName(builder, nameOffset);
  SplayApi.EventTable.addType(builder, type);
  SplayApi.EventTable.addActive(builder, active);
  SplayApi.EventTable.addValue(builder, valueOffset);
  SplayApi.EventTable.addStart(builder, start);
  return SplayApi.EventTable.endEventTable(builder);
}

// Exports for ECMAScript6 Modules
export {SplayApi};
