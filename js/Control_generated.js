// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var SplayApi = SplayApi || {};

/**
 * @enum {number}
 */
SplayApi.TRIGGER_TYPE = {
  TRIGGER_TYPE_NONE: 0,
  TRIGGER_TYPE_OSC: 1,
  TRIGGER_TYPE_RS232: 2,
  TRIGGER_TYPE_IO: 3,
  TRIGGER_TYPE_ARTNET: 4,
  TRIGGER_TYPE_DMX: 5,
  TRIGGER_TYPE_SACN: 6,
  TRIGGER_TYPE_POWERUP: 7,
  TRIGGER_TYPE_UDP: 8
};

/**
 * @enum {string}
 */
SplayApi.TRIGGER_TYPEName = {
  '0': 'TRIGGER_TYPE_NONE',
  '1': 'TRIGGER_TYPE_OSC',
  '2': 'TRIGGER_TYPE_RS232',
  '3': 'TRIGGER_TYPE_IO',
  '4': 'TRIGGER_TYPE_ARTNET',
  '5': 'TRIGGER_TYPE_DMX',
  '6': 'TRIGGER_TYPE_SACN',
  '7': 'TRIGGER_TYPE_POWERUP',
  '8': 'TRIGGER_TYPE_UDP'
};

/**
 * @enum {number}
 */
SplayApi.EVENT_TYPE = {
  EVENT_TYPE_NONE: 0,
  EVENT_TYPE_RS232: 1,
  EVENT_TYPE_IO: 2,
  EVENT_TYPE_ARTNET: 3,
  EVENT_TYPE_DMX: 4,
  EVENT_TYPE_SACN: 5,
  EVENT_TYPE_OSC: 6,
  EVENT_TYPE_UDP: 7
};

/**
 * @enum {string}
 */
SplayApi.EVENT_TYPEName = {
  '0': 'EVENT_TYPE_NONE',
  '1': 'EVENT_TYPE_RS232',
  '2': 'EVENT_TYPE_IO',
  '3': 'EVENT_TYPE_ARTNET',
  '4': 'EVENT_TYPE_DMX',
  '5': 'EVENT_TYPE_SACN',
  '6': 'EVENT_TYPE_OSC',
  '7': 'EVENT_TYPE_UDP'
};

/**
 * @constructor
 */
SplayApi.Trigger = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.Trigger}
 */
SplayApi.Trigger.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.Trigger=} obj
 * @returns {SplayApi.Trigger}
 */
SplayApi.Trigger.getRootAsTrigger = function(bb, obj) {
  return (obj || new SplayApi.Trigger).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.Trigger=} obj
 * @returns {SplayApi.Trigger}
 */
SplayApi.Trigger.getSizePrefixedRootAsTrigger = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.Trigger).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.Trigger.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.Trigger.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {SplayApi.TRIGGER_TYPE}
 */
SplayApi.Trigger.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {SplayApi.TRIGGER_TYPE} */ (this.bb.readUint8(this.bb_pos + offset)) : SplayApi.TRIGGER_TYPE.TRIGGER_TYPE_NONE;
};

/**
 * @returns {boolean}
 */
SplayApi.Trigger.prototype.active = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.Trigger.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SplayApi.Trigger.prototype.start = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.Trigger.startTrigger = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
SplayApi.Trigger.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
SplayApi.Trigger.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {SplayApi.TRIGGER_TYPE} type
 */
SplayApi.Trigger.addType = function(builder, type) {
  builder.addFieldInt8(2, type, SplayApi.TRIGGER_TYPE.TRIGGER_TYPE_NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} active
 */
SplayApi.Trigger.addActive = function(builder, active) {
  builder.addFieldInt8(3, +active, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
SplayApi.Trigger.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(4, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} start
 */
SplayApi.Trigger.addStart = function(builder, start) {
  builder.addFieldInt32(5, start, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.Trigger.endTrigger = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {flatbuffers.Offset} nameOffset
 * @param {SplayApi.TRIGGER_TYPE} type
 * @param {boolean} active
 * @param {flatbuffers.Offset} valueOffset
 * @param {number} start
 * @returns {flatbuffers.Offset}
 */
SplayApi.Trigger.createTrigger = function(builder, id, nameOffset, type, active, valueOffset, start) {
  SplayApi.Trigger.startTrigger(builder);
  SplayApi.Trigger.addId(builder, id);
  SplayApi.Trigger.addName(builder, nameOffset);
  SplayApi.Trigger.addType(builder, type);
  SplayApi.Trigger.addActive(builder, active);
  SplayApi.Trigger.addValue(builder, valueOffset);
  SplayApi.Trigger.addStart(builder, start);
  return SplayApi.Trigger.endTrigger(builder);
}

/**
 * @constructor
 */
SplayApi.Event = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.Event}
 */
SplayApi.Event.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.Event=} obj
 * @returns {SplayApi.Event}
 */
SplayApi.Event.getRootAsEvent = function(bb, obj) {
  return (obj || new SplayApi.Event).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.Event=} obj
 * @returns {SplayApi.Event}
 */
SplayApi.Event.getSizePrefixedRootAsEvent = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.Event).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.Event.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.Event.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {SplayApi.EVENT_TYPE}
 */
SplayApi.Event.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {SplayApi.EVENT_TYPE} */ (this.bb.readUint8(this.bb_pos + offset)) : SplayApi.EVENT_TYPE.EVENT_TYPE_NONE;
};

/**
 * @returns {boolean}
 */
SplayApi.Event.prototype.active = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.Event.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SplayApi.Event.prototype.start = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.Event.startEvent = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
SplayApi.Event.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
SplayApi.Event.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {SplayApi.EVENT_TYPE} type
 */
SplayApi.Event.addType = function(builder, type) {
  builder.addFieldInt8(2, type, SplayApi.EVENT_TYPE.EVENT_TYPE_NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} active
 */
SplayApi.Event.addActive = function(builder, active) {
  builder.addFieldInt8(3, +active, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
SplayApi.Event.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(4, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} start
 */
SplayApi.Event.addStart = function(builder, start) {
  builder.addFieldInt32(5, start, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.Event.endEvent = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {flatbuffers.Offset} nameOffset
 * @param {SplayApi.EVENT_TYPE} type
 * @param {boolean} active
 * @param {flatbuffers.Offset} valueOffset
 * @param {number} start
 * @returns {flatbuffers.Offset}
 */
SplayApi.Event.createEvent = function(builder, id, nameOffset, type, active, valueOffset, start) {
  SplayApi.Event.startEvent(builder);
  SplayApi.Event.addId(builder, id);
  SplayApi.Event.addName(builder, nameOffset);
  SplayApi.Event.addType(builder, type);
  SplayApi.Event.addActive(builder, active);
  SplayApi.Event.addValue(builder, valueOffset);
  SplayApi.Event.addStart(builder, start);
  return SplayApi.Event.endEvent(builder);
}

// Exports for Node.js and RequireJS
this.SplayApi = SplayApi;
