// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var SplayApi = SplayApi || {};

/**
 * @enum {number}
 */
SplayApi.UNIVERSE_TYPE = {
  DMX: 0,
  ARTNET: 1,
  SACN: 2,
  NONE: 3
};

/**
 * @enum {string}
 */
SplayApi.UNIVERSE_TYPEName = {
  '0': 'DMX',
  '1': 'ARTNET',
  '2': 'SACN',
  '3': 'NONE'
};

/**
 * @enum {number}
 */
SplayApi.WEBSOCKET_OUTPUT = {
  NOTHING: -2,
  ALL: -1
};

/**
 * @enum {string}
 */
SplayApi.WEBSOCKET_OUTPUTName = {
  '-2': 'NOTHING',
  '-1': 'ALL'
};

/**
 * Don't change order
 *
 * @enum {number}
 */
SplayApi.PIXEL_ORDER = {
  RGB: 0,
  RBG: 1,
  GRB: 2,
  GBR: 3,
  BRG: 4,
  BGR: 5,
  RGBW: 6,
  RBGW: 7,
  GRBW: 8,
  GBRW: 9,
  BRGW: 10,
  BGRW: 11,
  WRGB: 12,
  WRBG: 13,
  WGRB: 14,
  WGBR: 15,
  WBRG: 16,
  WBGR: 17,
  RWGB: 18,
  RWBG: 19,
  GWRB: 20,
  GWBR: 21,
  BWRG: 22,
  BWGR: 23,
  RGWB: 24,
  RBWG: 25,
  GRWB: 26,
  GBWR: 27,
  BRWG: 28,
  BGWR: 29,
  W: 30,
  RRGGBB: 31,
  RRGGBBWW: 32
};

/**
 * Don't change order
 *
 * @enum {string}
 */
SplayApi.PIXEL_ORDERName = {
  '0': 'RGB',
  '1': 'RBG',
  '2': 'GRB',
  '3': 'GBR',
  '4': 'BRG',
  '5': 'BGR',
  '6': 'RGBW',
  '7': 'RBGW',
  '8': 'GRBW',
  '9': 'GBRW',
  '10': 'BRGW',
  '11': 'BGRW',
  '12': 'WRGB',
  '13': 'WRBG',
  '14': 'WGRB',
  '15': 'WGBR',
  '16': 'WBRG',
  '17': 'WBGR',
  '18': 'RWGB',
  '19': 'RWBG',
  '20': 'GWRB',
  '21': 'GWBR',
  '22': 'BWRG',
  '23': 'BWGR',
  '24': 'RGWB',
  '25': 'RBWG',
  '26': 'GRWB',
  '27': 'GBWR',
  '28': 'BRWG',
  '29': 'BGWR',
  '30': 'W',
  '31': 'RRGGBB',
  '32': 'RRGGBBWW'
};

/**
 * @enum {number}
 */
SplayApi.SETTING = {
  IS_SPARE: 0,
  SYSTEM_NAME: 1,
  PLAYBACK_CONFIG: 2,
  PASSWORD: 3,
  SYNC_SENDER: 4,
  SERIALNO: 5,
  ENABLE_PASSWORD: 6,
  SMTP: 7,
  EMAIL: 8,
  INPUT: 9,
  OUTPUT: 10,
  DMX: 11,
  ARTNET: 12,
  SACN: 13,
  LOCATION: 14,
  NTP: 15,
  BASE_PATH: 16,
  CUE_PATH: 17,
  HOME_INTERFACE: 18,
  UDP: 19,
  TCP: 20,
  RS232C: 21,
  OSC: 22,
  IEEE1588_CONFIG: 23,
  IEEE1588_ACTIVE: 24,
  LOCK_STATUS: 25,
  DB_VERSION: 26
};

/**
 * @enum {string}
 */
SplayApi.SETTINGName = {
  '0': 'IS_SPARE',
  '1': 'SYSTEM_NAME',
  '2': 'PLAYBACK_CONFIG',
  '3': 'PASSWORD',
  '4': 'SYNC_SENDER',
  '5': 'SERIALNO',
  '6': 'ENABLE_PASSWORD',
  '7': 'SMTP',
  '8': 'EMAIL',
  '9': 'INPUT',
  '10': 'OUTPUT',
  '11': 'DMX',
  '12': 'ARTNET',
  '13': 'SACN',
  '14': 'LOCATION',
  '15': 'NTP',
  '16': 'BASE_PATH',
  '17': 'CUE_PATH',
  '18': 'HOME_INTERFACE',
  '19': 'UDP',
  '20': 'TCP',
  '21': 'RS232C',
  '22': 'OSC',
  '23': 'IEEE1588_CONFIG',
  '24': 'IEEE1588_ACTIVE',
  '25': 'LOCK_STATUS',
  '26': 'DB_VERSION'
};

/**
 * @enum {number}
 */
SplayApi.STATUS_TYPE = {
  MESSAGE: 0,
  WARNING: 1,
  ERROR: 2
};

/**
 * @enum {string}
 */
SplayApi.STATUS_TYPEName = {
  '0': 'MESSAGE',
  '1': 'WARNING',
  '2': 'ERROR'
};

/**
 * @constructor
 */
SplayApi.GetUploadStatus = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.GetUploadStatus}
 */
SplayApi.GetUploadStatus.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.GetUploadStatus=} obj
 * @returns {SplayApi.GetUploadStatus}
 */
SplayApi.GetUploadStatus.getRootAsGetUploadStatus = function(bb, obj) {
  return (obj || new SplayApi.GetUploadStatus).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.GetUploadStatus=} obj
 * @returns {SplayApi.GetUploadStatus}
 */
SplayApi.GetUploadStatus.getSizePrefixedRootAsGetUploadStatus = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.GetUploadStatus).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.GetUploadStatus.prototype.progress = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
SplayApi.GetUploadStatus.prototype.sequence = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.GetUploadStatus.prototype.error = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.GetUploadStatus.startGetUploadStatus = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} progress
 */
SplayApi.GetUploadStatus.addProgress = function(builder, progress) {
  builder.addFieldInt8(0, progress, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sequence
 */
SplayApi.GetUploadStatus.addSequence = function(builder, sequence) {
  builder.addFieldInt16(1, sequence, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} errorOffset
 */
SplayApi.GetUploadStatus.addError = function(builder, errorOffset) {
  builder.addFieldOffset(2, errorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.GetUploadStatus.endGetUploadStatus = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} progress
 * @param {number} sequence
 * @param {flatbuffers.Offset} errorOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.GetUploadStatus.createGetUploadStatus = function(builder, progress, sequence, errorOffset) {
  SplayApi.GetUploadStatus.startGetUploadStatus(builder);
  SplayApi.GetUploadStatus.addProgress(builder, progress);
  SplayApi.GetUploadStatus.addSequence(builder, sequence);
  SplayApi.GetUploadStatus.addError(builder, errorOffset);
  return SplayApi.GetUploadStatus.endGetUploadStatus(builder);
}

/**
 * @constructor
 */
SplayApi.SystemInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.SystemInfo}
 */
SplayApi.SystemInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.SystemInfo=} obj
 * @returns {SplayApi.SystemInfo}
 */
SplayApi.SystemInfo.getRootAsSystemInfo = function(bb, obj) {
  return (obj || new SplayApi.SystemInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.SystemInfo=} obj
 * @returns {SplayApi.SystemInfo}
 */
SplayApi.SystemInfo.getSizePrefixedRootAsSystemInfo = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.SystemInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.SystemInfo.prototype.cpuUsage = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
SplayApi.SystemInfo.prototype.temperature = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.SystemInfo.prototype.time = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.SystemInfo.startSystemInfo = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} cpuUsage
 */
SplayApi.SystemInfo.addCpuUsage = function(builder, cpuUsage) {
  builder.addFieldFloat32(0, cpuUsage, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} temperature
 */
SplayApi.SystemInfo.addTemperature = function(builder, temperature) {
  builder.addFieldFloat32(1, temperature, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} timeOffset
 */
SplayApi.SystemInfo.addTime = function(builder, timeOffset) {
  builder.addFieldOffset(2, timeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.SystemInfo.endSystemInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} cpuUsage
 * @param {number} temperature
 * @param {flatbuffers.Offset} timeOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.SystemInfo.createSystemInfo = function(builder, cpuUsage, temperature, timeOffset) {
  SplayApi.SystemInfo.startSystemInfo(builder);
  SplayApi.SystemInfo.addCpuUsage(builder, cpuUsage);
  SplayApi.SystemInfo.addTemperature(builder, temperature);
  SplayApi.SystemInfo.addTime(builder, timeOffset);
  return SplayApi.SystemInfo.endSystemInfo(builder);
}

/**
 * @constructor
 */
SplayApi.RestorePackage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.RestorePackage}
 */
SplayApi.RestorePackage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.RestorePackage=} obj
 * @returns {SplayApi.RestorePackage}
 */
SplayApi.RestorePackage.getRootAsRestorePackage = function(bb, obj) {
  return (obj || new SplayApi.RestorePackage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.RestorePackage=} obj
 * @returns {SplayApi.RestorePackage}
 */
SplayApi.RestorePackage.getSizePrefixedRootAsRestorePackage = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.RestorePackage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.RestorePackage.prototype.currentSequence = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
SplayApi.RestorePackage.prototype.lastSequence = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.RestorePackage.prototype.destination = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
SplayApi.RestorePackage.prototype.data = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
SplayApi.RestorePackage.prototype.dataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
SplayApi.RestorePackage.prototype.dataArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.RestorePackage.startRestorePackage = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} currentSequence
 */
SplayApi.RestorePackage.addCurrentSequence = function(builder, currentSequence) {
  builder.addFieldInt16(0, currentSequence, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} lastSequence
 */
SplayApi.RestorePackage.addLastSequence = function(builder, lastSequence) {
  builder.addFieldInt16(1, lastSequence, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} destinationOffset
 */
SplayApi.RestorePackage.addDestination = function(builder, destinationOffset) {
  builder.addFieldOffset(2, destinationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
SplayApi.RestorePackage.addData = function(builder, dataOffset) {
  builder.addFieldOffset(3, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
SplayApi.RestorePackage.createDataVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
SplayApi.RestorePackage.startDataVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.RestorePackage.endRestorePackage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} currentSequence
 * @param {number} lastSequence
 * @param {flatbuffers.Offset} destinationOffset
 * @param {flatbuffers.Offset} dataOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.RestorePackage.createRestorePackage = function(builder, currentSequence, lastSequence, destinationOffset, dataOffset) {
  SplayApi.RestorePackage.startRestorePackage(builder);
  SplayApi.RestorePackage.addCurrentSequence(builder, currentSequence);
  SplayApi.RestorePackage.addLastSequence(builder, lastSequence);
  SplayApi.RestorePackage.addDestination(builder, destinationOffset);
  SplayApi.RestorePackage.addData(builder, dataOffset);
  return SplayApi.RestorePackage.endRestorePackage(builder);
}

/**
 * @constructor
 */
SplayApi.FirmwarePackage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.FirmwarePackage}
 */
SplayApi.FirmwarePackage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.FirmwarePackage=} obj
 * @returns {SplayApi.FirmwarePackage}
 */
SplayApi.FirmwarePackage.getRootAsFirmwarePackage = function(bb, obj) {
  return (obj || new SplayApi.FirmwarePackage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.FirmwarePackage=} obj
 * @returns {SplayApi.FirmwarePackage}
 */
SplayApi.FirmwarePackage.getSizePrefixedRootAsFirmwarePackage = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.FirmwarePackage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.FirmwarePackage.prototype.currentSequence = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
SplayApi.FirmwarePackage.prototype.lastSequence = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {number}
 */
SplayApi.FirmwarePackage.prototype.data = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
SplayApi.FirmwarePackage.prototype.dataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
SplayApi.FirmwarePackage.prototype.dataArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.FirmwarePackage.startFirmwarePackage = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} currentSequence
 */
SplayApi.FirmwarePackage.addCurrentSequence = function(builder, currentSequence) {
  builder.addFieldInt16(0, currentSequence, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} lastSequence
 */
SplayApi.FirmwarePackage.addLastSequence = function(builder, lastSequence) {
  builder.addFieldInt16(1, lastSequence, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
SplayApi.FirmwarePackage.addData = function(builder, dataOffset) {
  builder.addFieldOffset(2, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
SplayApi.FirmwarePackage.createDataVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
SplayApi.FirmwarePackage.startDataVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.FirmwarePackage.endFirmwarePackage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} currentSequence
 * @param {number} lastSequence
 * @param {flatbuffers.Offset} dataOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.FirmwarePackage.createFirmwarePackage = function(builder, currentSequence, lastSequence, dataOffset) {
  SplayApi.FirmwarePackage.startFirmwarePackage(builder);
  SplayApi.FirmwarePackage.addCurrentSequence(builder, currentSequence);
  SplayApi.FirmwarePackage.addLastSequence(builder, lastSequence);
  SplayApi.FirmwarePackage.addData(builder, dataOffset);
  return SplayApi.FirmwarePackage.endFirmwarePackage(builder);
}

/**
 * @constructor
 */
SplayApi.BackupInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.BackupInfo}
 */
SplayApi.BackupInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.BackupInfo=} obj
 * @returns {SplayApi.BackupInfo}
 */
SplayApi.BackupInfo.getRootAsBackupInfo = function(bb, obj) {
  return (obj || new SplayApi.BackupInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.BackupInfo=} obj
 * @returns {SplayApi.BackupInfo}
 */
SplayApi.BackupInfo.getSizePrefixedRootAsBackupInfo = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.BackupInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {boolean}
 */
SplayApi.BackupInfo.prototype.inProgress = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.BackupInfo.prototype.link = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.BackupInfo.prototype.message = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.BackupInfo.prototype.error = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.BackupInfo.startBackupInfo = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} inProgress
 */
SplayApi.BackupInfo.addInProgress = function(builder, inProgress) {
  builder.addFieldInt8(0, +inProgress, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} linkOffset
 */
SplayApi.BackupInfo.addLink = function(builder, linkOffset) {
  builder.addFieldOffset(1, linkOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messageOffset
 */
SplayApi.BackupInfo.addMessage = function(builder, messageOffset) {
  builder.addFieldOffset(2, messageOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} errorOffset
 */
SplayApi.BackupInfo.addError = function(builder, errorOffset) {
  builder.addFieldOffset(3, errorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.BackupInfo.endBackupInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} inProgress
 * @param {flatbuffers.Offset} linkOffset
 * @param {flatbuffers.Offset} messageOffset
 * @param {flatbuffers.Offset} errorOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.BackupInfo.createBackupInfo = function(builder, inProgress, linkOffset, messageOffset, errorOffset) {
  SplayApi.BackupInfo.startBackupInfo(builder);
  SplayApi.BackupInfo.addInProgress(builder, inProgress);
  SplayApi.BackupInfo.addLink(builder, linkOffset);
  SplayApi.BackupInfo.addMessage(builder, messageOffset);
  SplayApi.BackupInfo.addError(builder, errorOffset);
  return SplayApi.BackupInfo.endBackupInfo(builder);
}

/**
 * @constructor
 */
SplayApi.SplayDevice = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.SplayDevice}
 */
SplayApi.SplayDevice.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.SplayDevice=} obj
 * @returns {SplayApi.SplayDevice}
 */
SplayApi.SplayDevice.getRootAsSplayDevice = function(bb, obj) {
  return (obj || new SplayApi.SplayDevice).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.SplayDevice=} obj
 * @returns {SplayApi.SplayDevice}
 */
SplayApi.SplayDevice.getSizePrefixedRootAsSplayDevice = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.SplayDevice).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.SplayDevice.prototype.ip = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.SplayDevice.prototype.mac = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.SplayDevice.prototype.hostname = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.SplayDevice.prototype.serviceName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.SplayDevice.startSplayDevice = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ipOffset
 */
SplayApi.SplayDevice.addIp = function(builder, ipOffset) {
  builder.addFieldOffset(0, ipOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} macOffset
 */
SplayApi.SplayDevice.addMac = function(builder, macOffset) {
  builder.addFieldOffset(1, macOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hostnameOffset
 */
SplayApi.SplayDevice.addHostname = function(builder, hostnameOffset) {
  builder.addFieldOffset(2, hostnameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} serviceNameOffset
 */
SplayApi.SplayDevice.addServiceName = function(builder, serviceNameOffset) {
  builder.addFieldOffset(3, serviceNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.SplayDevice.endSplayDevice = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ipOffset
 * @param {flatbuffers.Offset} macOffset
 * @param {flatbuffers.Offset} hostnameOffset
 * @param {flatbuffers.Offset} serviceNameOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.SplayDevice.createSplayDevice = function(builder, ipOffset, macOffset, hostnameOffset, serviceNameOffset) {
  SplayApi.SplayDevice.startSplayDevice(builder);
  SplayApi.SplayDevice.addIp(builder, ipOffset);
  SplayApi.SplayDevice.addMac(builder, macOffset);
  SplayApi.SplayDevice.addHostname(builder, hostnameOffset);
  SplayApi.SplayDevice.addServiceName(builder, serviceNameOffset);
  return SplayApi.SplayDevice.endSplayDevice(builder);
}

/**
 * @constructor
 */
SplayApi.DiscoveryInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.DiscoveryInfo}
 */
SplayApi.DiscoveryInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.DiscoveryInfo=} obj
 * @returns {SplayApi.DiscoveryInfo}
 */
SplayApi.DiscoveryInfo.getRootAsDiscoveryInfo = function(bb, obj) {
  return (obj || new SplayApi.DiscoveryInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.DiscoveryInfo=} obj
 * @returns {SplayApi.DiscoveryInfo}
 */
SplayApi.DiscoveryInfo.getSizePrefixedRootAsDiscoveryInfo = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.DiscoveryInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {SplayApi.SplayDevice=} obj
 * @returns {SplayApi.SplayDevice}
 */
SplayApi.DiscoveryInfo.prototype.splayDevices = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new SplayApi.SplayDevice).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
SplayApi.DiscoveryInfo.prototype.splayDevicesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.DiscoveryInfo.startDiscoveryInfo = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} splayDevicesOffset
 */
SplayApi.DiscoveryInfo.addSplayDevices = function(builder, splayDevicesOffset) {
  builder.addFieldOffset(0, splayDevicesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
SplayApi.DiscoveryInfo.createSplayDevicesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
SplayApi.DiscoveryInfo.startSplayDevicesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.DiscoveryInfo.endDiscoveryInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} splayDevicesOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.DiscoveryInfo.createDiscoveryInfo = function(builder, splayDevicesOffset) {
  SplayApi.DiscoveryInfo.startDiscoveryInfo(builder);
  SplayApi.DiscoveryInfo.addSplayDevices(builder, splayDevicesOffset);
  return SplayApi.DiscoveryInfo.endDiscoveryInfo(builder);
}

/**
 * @constructor
 */
SplayApi.StatusInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.StatusInfo}
 */
SplayApi.StatusInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.StatusInfo=} obj
 * @returns {SplayApi.StatusInfo}
 */
SplayApi.StatusInfo.getRootAsStatusInfo = function(bb, obj) {
  return (obj || new SplayApi.StatusInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.StatusInfo=} obj
 * @returns {SplayApi.StatusInfo}
 */
SplayApi.StatusInfo.getSizePrefixedRootAsStatusInfo = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.StatusInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {SplayApi.STATUS_TYPE}
 */
SplayApi.StatusInfo.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {SplayApi.STATUS_TYPE} */ (this.bb.readUint8(this.bb_pos + offset)) : SplayApi.STATUS_TYPE.MESSAGE;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.StatusInfo.prototype.text = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.StatusInfo.startStatusInfo = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {SplayApi.STATUS_TYPE} type
 */
SplayApi.StatusInfo.addType = function(builder, type) {
  builder.addFieldInt8(0, type, SplayApi.STATUS_TYPE.MESSAGE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} textOffset
 */
SplayApi.StatusInfo.addText = function(builder, textOffset) {
  builder.addFieldOffset(1, textOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.StatusInfo.endStatusInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {SplayApi.STATUS_TYPE} type
 * @param {flatbuffers.Offset} textOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.StatusInfo.createStatusInfo = function(builder, type, textOffset) {
  SplayApi.StatusInfo.startStatusInfo(builder);
  SplayApi.StatusInfo.addType(builder, type);
  SplayApi.StatusInfo.addText(builder, textOffset);
  return SplayApi.StatusInfo.endStatusInfo(builder);
}

// Exports for ECMAScript6 Modules
export {SplayApi};
