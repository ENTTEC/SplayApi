// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var SplayApi = SplayApi || {};

/**
 * @enum {number}
 */
SplayApi.CUE_TYPE = {
  CUE_TYPE_STATIC: 0,
  CUE_TYPE_DYNAMIC: 1,
  CUE_TYPE_EFFECT: 2
};

/**
 * @enum {string}
 */
SplayApi.CUE_TYPEName = {
  '0': 'CUE_TYPE_STATIC',
  '1': 'CUE_TYPE_DYNAMIC',
  '2': 'CUE_TYPE_EFFECT'
};

/**
 * @constructor
 */
SplayApi.Cue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {SplayApi.Cue}
 */
SplayApi.Cue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.Cue=} obj
 * @returns {SplayApi.Cue}
 */
SplayApi.Cue.getRootAsCue = function(bb, obj) {
  return (obj || new SplayApi.Cue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {SplayApi.Cue=} obj
 * @returns {SplayApi.Cue}
 */
SplayApi.Cue.getSizePrefixedRootAsCue = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplayApi.Cue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
SplayApi.Cue.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {SplayApi.CUE_TYPE}
 */
SplayApi.Cue.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {SplayApi.CUE_TYPE} */ (this.bb.readUint8(this.bb_pos + offset)) : SplayApi.CUE_TYPE.CUE_TYPE_STATIC;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.Cue.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
SplayApi.Cue.prototype.duration = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
SplayApi.Cue.prototype.frames = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
SplayApi.Cue.startCue = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
SplayApi.Cue.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {SplayApi.CUE_TYPE} type
 */
SplayApi.Cue.addType = function(builder, type) {
  builder.addFieldInt8(1, type, SplayApi.CUE_TYPE.CUE_TYPE_STATIC);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
SplayApi.Cue.addName = function(builder, nameOffset) {
  builder.addFieldOffset(2, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} duration
 */
SplayApi.Cue.addDuration = function(builder, duration) {
  builder.addFieldInt32(3, duration, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} framesOffset
 */
SplayApi.Cue.addFrames = function(builder, framesOffset) {
  builder.addFieldOffset(4, framesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
SplayApi.Cue.endCue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {SplayApi.CUE_TYPE} type
 * @param {flatbuffers.Offset} nameOffset
 * @param {number} duration
 * @param {flatbuffers.Offset} framesOffset
 * @returns {flatbuffers.Offset}
 */
SplayApi.Cue.createCue = function(builder, id, type, nameOffset, duration, framesOffset) {
  SplayApi.Cue.startCue(builder);
  SplayApi.Cue.addId(builder, id);
  SplayApi.Cue.addType(builder, type);
  SplayApi.Cue.addName(builder, nameOffset);
  SplayApi.Cue.addDuration(builder, duration);
  SplayApi.Cue.addFrames(builder, framesOffset);
  return SplayApi.Cue.endCue(builder);
}

// Exports for Node.js and RequireJS
this.SplayApi = SplayApi;
