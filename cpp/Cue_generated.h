// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CUE_SPLAYAPI_H_
#define FLATBUFFERS_GENERATED_CUE_SPLAYAPI_H_

#include "flatbuffers/flatbuffers.h"

namespace SplayApi {

struct Cue;
struct CueBuilder;

enum CUE_TYPE {
  CUE_TYPE_CUE_TYPE_STATIC = 0,
  CUE_TYPE_CUE_TYPE_DYNAMIC = 1,
  CUE_TYPE_CUE_TYPE_EFFECT = 2,
  CUE_TYPE_MIN = CUE_TYPE_CUE_TYPE_STATIC,
  CUE_TYPE_MAX = CUE_TYPE_CUE_TYPE_EFFECT
};

inline const CUE_TYPE (&EnumValuesCUE_TYPE())[3] {
  static const CUE_TYPE values[] = {
    CUE_TYPE_CUE_TYPE_STATIC,
    CUE_TYPE_CUE_TYPE_DYNAMIC,
    CUE_TYPE_CUE_TYPE_EFFECT
  };
  return values;
}

inline const char * const *EnumNamesCUE_TYPE() {
  static const char * const names[4] = {
    "CUE_TYPE_STATIC",
    "CUE_TYPE_DYNAMIC",
    "CUE_TYPE_EFFECT",
    nullptr
  };
  return names;
}

inline const char *EnumNameCUE_TYPE(CUE_TYPE e) {
  if (flatbuffers::IsOutRange(e, CUE_TYPE_CUE_TYPE_STATIC, CUE_TYPE_CUE_TYPE_EFFECT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCUE_TYPE()[index];
}

struct Cue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_NAME = 8,
    VT_DURATION = 10,
    VT_FRAMES = 12
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  SplayApi::CUE_TYPE type() const {
    return static_cast<SplayApi::CUE_TYPE>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t duration() const {
    return GetField<uint32_t>(VT_DURATION, 0);
  }
  const flatbuffers::String *frames() const {
    return GetPointer<const flatbuffers::String *>(VT_FRAMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_DURATION) &&
           VerifyOffset(verifier, VT_FRAMES) &&
           verifier.VerifyString(frames()) &&
           verifier.EndTable();
  }
};

struct CueBuilder {
  typedef Cue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Cue::VT_ID, id, 0);
  }
  void add_type(SplayApi::CUE_TYPE type) {
    fbb_.AddElement<uint8_t>(Cue::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Cue::VT_NAME, name);
  }
  void add_duration(uint32_t duration) {
    fbb_.AddElement<uint32_t>(Cue::VT_DURATION, duration, 0);
  }
  void add_frames(flatbuffers::Offset<flatbuffers::String> frames) {
    fbb_.AddOffset(Cue::VT_FRAMES, frames);
  }
  explicit CueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CueBuilder &operator=(const CueBuilder &);
  flatbuffers::Offset<Cue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cue>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cue> CreateCue(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    SplayApi::CUE_TYPE type = SplayApi::CUE_TYPE_CUE_TYPE_STATIC,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t duration = 0,
    flatbuffers::Offset<flatbuffers::String> frames = 0) {
  CueBuilder builder_(_fbb);
  builder_.add_frames(frames);
  builder_.add_duration(duration);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cue> CreateCueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    SplayApi::CUE_TYPE type = SplayApi::CUE_TYPE_CUE_TYPE_STATIC,
    const char *name = nullptr,
    uint32_t duration = 0,
    const char *frames = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto frames__ = frames ? _fbb.CreateString(frames) : 0;
  return SplayApi::CreateCue(
      _fbb,
      id,
      type,
      name__,
      duration,
      frames__);
}

}  // namespace SplayApi

#endif  // FLATBUFFERS_GENERATED_CUE_SPLAYAPI_H_
