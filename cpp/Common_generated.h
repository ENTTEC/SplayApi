// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_SPLAYAPI_H_
#define FLATBUFFERS_GENERATED_COMMON_SPLAYAPI_H_

#include "flatbuffers/flatbuffers.h"

namespace SplayApi {

enum UNIVERSE_TYPE {
  UNIVERSE_TYPE_DMX_TYPE = 0,
  UNIVERSE_TYPE_ARTNET_TYPE = 1,
  UNIVERSE_TYPE_SACN_TYPE = 2,
  UNIVERSE_TYPE_NONE_TYPE = 3,
  UNIVERSE_TYPE_MIN = UNIVERSE_TYPE_DMX_TYPE,
  UNIVERSE_TYPE_MAX = UNIVERSE_TYPE_NONE_TYPE
};

inline const UNIVERSE_TYPE (&EnumValuesUNIVERSE_TYPE())[4] {
  static const UNIVERSE_TYPE values[] = {
    UNIVERSE_TYPE_DMX_TYPE,
    UNIVERSE_TYPE_ARTNET_TYPE,
    UNIVERSE_TYPE_SACN_TYPE,
    UNIVERSE_TYPE_NONE_TYPE
  };
  return values;
}

inline const char * const *EnumNamesUNIVERSE_TYPE() {
  static const char * const names[5] = {
    "DMX_TYPE",
    "ARTNET_TYPE",
    "SACN_TYPE",
    "NONE_TYPE",
    nullptr
  };
  return names;
}

inline const char *EnumNameUNIVERSE_TYPE(UNIVERSE_TYPE e) {
  if (flatbuffers::IsOutRange(e, UNIVERSE_TYPE_DMX_TYPE, UNIVERSE_TYPE_NONE_TYPE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUNIVERSE_TYPE()[index];
}

/// Don't change order
enum PIXEL_ORDER {
  PIXEL_ORDER_RGB = 0,
  PIXEL_ORDER_RBG = 1,
  PIXEL_ORDER_GRB = 2,
  PIXEL_ORDER_GBR = 3,
  PIXEL_ORDER_BRG = 4,
  PIXEL_ORDER_BGR = 5,
  PIXEL_ORDER_RGBW = 6,
  PIXEL_ORDER_RBGW = 7,
  PIXEL_ORDER_GRBW = 8,
  PIXEL_ORDER_GBRW = 9,
  PIXEL_ORDER_BRGW = 10,
  PIXEL_ORDER_BGRW = 11,
  PIXEL_ORDER_WRGB = 12,
  PIXEL_ORDER_WRBG = 13,
  PIXEL_ORDER_WGRB = 14,
  PIXEL_ORDER_WGBR = 15,
  PIXEL_ORDER_WBRG = 16,
  PIXEL_ORDER_WBGR = 17,
  PIXEL_ORDER_RWGB = 18,
  PIXEL_ORDER_RWBG = 19,
  PIXEL_ORDER_GWRB = 20,
  PIXEL_ORDER_GWBR = 21,
  PIXEL_ORDER_BWRG = 22,
  PIXEL_ORDER_BWGR = 23,
  PIXEL_ORDER_RGWB = 24,
  PIXEL_ORDER_RBWG = 25,
  PIXEL_ORDER_GRWB = 26,
  PIXEL_ORDER_GBWR = 27,
  PIXEL_ORDER_BRWG = 28,
  PIXEL_ORDER_BGWR = 29,
  PIXEL_ORDER_MIN = PIXEL_ORDER_RGB,
  PIXEL_ORDER_MAX = PIXEL_ORDER_BGWR
};

inline const PIXEL_ORDER (&EnumValuesPIXEL_ORDER())[30] {
  static const PIXEL_ORDER values[] = {
    PIXEL_ORDER_RGB,
    PIXEL_ORDER_RBG,
    PIXEL_ORDER_GRB,
    PIXEL_ORDER_GBR,
    PIXEL_ORDER_BRG,
    PIXEL_ORDER_BGR,
    PIXEL_ORDER_RGBW,
    PIXEL_ORDER_RBGW,
    PIXEL_ORDER_GRBW,
    PIXEL_ORDER_GBRW,
    PIXEL_ORDER_BRGW,
    PIXEL_ORDER_BGRW,
    PIXEL_ORDER_WRGB,
    PIXEL_ORDER_WRBG,
    PIXEL_ORDER_WGRB,
    PIXEL_ORDER_WGBR,
    PIXEL_ORDER_WBRG,
    PIXEL_ORDER_WBGR,
    PIXEL_ORDER_RWGB,
    PIXEL_ORDER_RWBG,
    PIXEL_ORDER_GWRB,
    PIXEL_ORDER_GWBR,
    PIXEL_ORDER_BWRG,
    PIXEL_ORDER_BWGR,
    PIXEL_ORDER_RGWB,
    PIXEL_ORDER_RBWG,
    PIXEL_ORDER_GRWB,
    PIXEL_ORDER_GBWR,
    PIXEL_ORDER_BRWG,
    PIXEL_ORDER_BGWR
  };
  return values;
}

inline const char * const *EnumNamesPIXEL_ORDER() {
  static const char * const names[31] = {
    "RGB",
    "RBG",
    "GRB",
    "GBR",
    "BRG",
    "BGR",
    "RGBW",
    "RBGW",
    "GRBW",
    "GBRW",
    "BRGW",
    "BGRW",
    "WRGB",
    "WRBG",
    "WGRB",
    "WGBR",
    "WBRG",
    "WBGR",
    "RWGB",
    "RWBG",
    "GWRB",
    "GWBR",
    "BWRG",
    "BWGR",
    "RGWB",
    "RBWG",
    "GRWB",
    "GBWR",
    "BRWG",
    "BGWR",
    nullptr
  };
  return names;
}

inline const char *EnumNamePIXEL_ORDER(PIXEL_ORDER e) {
  if (flatbuffers::IsOutRange(e, PIXEL_ORDER_RGB, PIXEL_ORDER_BGWR)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPIXEL_ORDER()[index];
}

}  // namespace SplayApi

#endif  // FLATBUFFERS_GENERATED_COMMON_SPLAYAPI_H_
