// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class DmxFrame {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DmxFrame {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDmxFrame(bb:flatbuffers.ByteBuffer, obj?:DmxFrame):DmxFrame {
  return (obj || new DmxFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDmxFrame(bb:flatbuffers.ByteBuffer, obj?:DmxFrame):DmxFrame {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DmxFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

output():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

time():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

channels(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

channelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

channelsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startDmxFrame(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addOutput(builder:flatbuffers.Builder, output:number) {
  builder.addFieldInt16(0, output, 0);
}

static addTime(builder:flatbuffers.Builder, time:number) {
  builder.addFieldInt32(1, time, 0);
}

static addChannels(builder:flatbuffers.Builder, channelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, channelsOffset, 0);
}

static createChannelsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startChannelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endDmxFrame(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDmxFrame(builder:flatbuffers.Builder, output:number, time:number, channelsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DmxFrame.startDmxFrame(builder);
  DmxFrame.addOutput(builder, output);
  DmxFrame.addTime(builder, time);
  DmxFrame.addChannels(builder, channelsOffset);
  return DmxFrame.endDmxFrame(builder);
}
}
