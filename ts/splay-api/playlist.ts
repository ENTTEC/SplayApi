// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CueTable } from '../splay-api/cue-table.js';
import { EventTable } from '../splay-api/event-table.js';
import { PLAYLIST_STATUS } from '../splay-api/playlist-status.js';
import { TriggerTable } from '../splay-api/trigger-table.js';


export class Playlist {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Playlist {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlaylist(bb:flatbuffers.ByteBuffer, obj?:Playlist):Playlist {
  return (obj || new Playlist()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlaylist(bb:flatbuffers.ByteBuffer, obj?:Playlist):Playlist {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Playlist()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playlistId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

order():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

group():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

status():PLAYLIST_STATUS {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : PLAYLIST_STATUS.IDLE;
}

currentTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

duration():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

intensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

waitingTriggers():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hideFromHome():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

startTrigger(obj?:TriggerTable):TriggerTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new TriggerTable()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

stopTrigger(obj?:TriggerTable):TriggerTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new TriggerTable()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

triggers(index: number, obj?:TriggerTable):TriggerTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new TriggerTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

triggersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

events(index: number, obj?:EventTable):EventTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new EventTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

eventsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

track1(index: number, obj?:CueTable):CueTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new CueTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

track1Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

track2(index: number, obj?:CueTable):CueTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new CueTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

track2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

track3(index: number, obj?:CueTable):CueTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new CueTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

track3Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

track4(index: number, obj?:CueTable):CueTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? (obj || new CueTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

track4Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPlaylist(builder:flatbuffers.Builder) {
  builder.startObject(18);
}

static addPlaylistId(builder:flatbuffers.Builder, playlistId:number) {
  builder.addFieldInt16(0, playlistId, 0);
}

static addOrder(builder:flatbuffers.Builder, order:number) {
  builder.addFieldInt16(1, order, 0);
}

static addGroup(builder:flatbuffers.Builder, group:number) {
  builder.addFieldInt16(2, group, 0);
}

static addStatus(builder:flatbuffers.Builder, status:PLAYLIST_STATUS) {
  builder.addFieldInt8(3, status, PLAYLIST_STATUS.IDLE);
}

static addCurrentTime(builder:flatbuffers.Builder, currentTime:number) {
  builder.addFieldInt32(4, currentTime, 0);
}

static addDuration(builder:flatbuffers.Builder, duration:number) {
  builder.addFieldInt32(5, duration, 0);
}

static addIntensity(builder:flatbuffers.Builder, intensity:number) {
  builder.addFieldInt8(6, intensity, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, nameOffset, 0);
}

static addWaitingTriggers(builder:flatbuffers.Builder, waitingTriggers:boolean) {
  builder.addFieldInt8(8, +waitingTriggers, +false);
}

static addHideFromHome(builder:flatbuffers.Builder, hideFromHome:boolean) {
  builder.addFieldInt8(9, +hideFromHome, +false);
}

static addStartTrigger(builder:flatbuffers.Builder, startTriggerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, startTriggerOffset, 0);
}

static addStopTrigger(builder:flatbuffers.Builder, stopTriggerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, stopTriggerOffset, 0);
}

static addTriggers(builder:flatbuffers.Builder, triggersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, triggersOffset, 0);
}

static createTriggersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTriggersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEvents(builder:flatbuffers.Builder, eventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, eventsOffset, 0);
}

static createEventsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEventsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrack1(builder:flatbuffers.Builder, track1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(14, track1Offset, 0);
}

static createTrack1Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrack1Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrack2(builder:flatbuffers.Builder, track2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(15, track2Offset, 0);
}

static createTrack2Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrack2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrack3(builder:flatbuffers.Builder, track3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(16, track3Offset, 0);
}

static createTrack3Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrack3Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrack4(builder:flatbuffers.Builder, track4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(17, track4Offset, 0);
}

static createTrack4Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrack4Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPlaylist(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
