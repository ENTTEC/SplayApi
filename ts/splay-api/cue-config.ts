// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TriggerTable } from '../splay-api/trigger-table.js';
import { UNIVERSE_TYPE } from '../splay-api/universe-type.js';


export class CueConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CueConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCueConfig(bb:flatbuffers.ByteBuffer, obj?:CueConfig):CueConfig {
  return (obj || new CueConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCueConfig(bb:flatbuffers.ByteBuffer, obj?:CueConfig):CueConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CueConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

chStop():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 511;
}

source():UNIVERSE_TYPE {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : UNIVERSE_TYPE.DMX;
}

recControl():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

trigger(obj?:TriggerTable):TriggerTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new TriggerTable()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startCueConfig(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addChStart(builder:flatbuffers.Builder, chStart:number) {
  builder.addFieldInt16(0, chStart, 0);
}

static addChStop(builder:flatbuffers.Builder, chStop:number) {
  builder.addFieldInt16(1, chStop, 511);
}

static addSource(builder:flatbuffers.Builder, source:UNIVERSE_TYPE) {
  builder.addFieldInt8(2, source, UNIVERSE_TYPE.DMX);
}

static addRecControl(builder:flatbuffers.Builder, recControl:boolean) {
  builder.addFieldInt8(3, +recControl, +false);
}

static addTrigger(builder:flatbuffers.Builder, triggerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, triggerOffset, 0);
}

static endCueConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
