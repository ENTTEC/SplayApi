// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CUE_STATUS } from '../splay-api/cue-status.js';
import { CUE_TYPE } from '../splay-api/cue-type.js';
import { CueConfig } from '../splay-api/cue-config.js';
import { DmxFrame } from '../splay-api/dmx-frame.js';


export class CueTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CueTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCueTable(bb:flatbuffers.ByteBuffer, obj?:CueTable):CueTable {
  return (obj || new CueTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCueTable(bb:flatbuffers.ByteBuffer, obj?:CueTable):CueTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CueTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cueId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

type():CUE_TYPE {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CUE_TYPE.STATIC;
}

status():CUE_STATUS {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CUE_STATUS.STOPPED;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

duration():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

frames(index: number, obj?:DmxFrame):DmxFrame|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DmxFrame()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

framesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

config(obj?:CueConfig):CueConfig|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new CueConfig()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startCueTable(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addCueId(builder:flatbuffers.Builder, cueId:number) {
  builder.addFieldInt16(0, cueId, 0);
}

static addType(builder:flatbuffers.Builder, type:CUE_TYPE) {
  builder.addFieldInt8(1, type, CUE_TYPE.STATIC);
}

static addStatus(builder:flatbuffers.Builder, status:CUE_STATUS) {
  builder.addFieldInt8(2, status, CUE_STATUS.STOPPED);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addDuration(builder:flatbuffers.Builder, duration:number) {
  builder.addFieldInt32(4, duration, 0);
}

static addFrames(builder:flatbuffers.Builder, framesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, framesOffset, 0);
}

static createFramesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFramesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, configOffset, 0);
}

static endCueTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
