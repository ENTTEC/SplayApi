// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SplayDevice } from '../splay-api/splay-device.js';


export class DiscoveryInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DiscoveryInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDiscoveryInfo(bb:flatbuffers.ByteBuffer, obj?:DiscoveryInfo):DiscoveryInfo {
  return (obj || new DiscoveryInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDiscoveryInfo(bb:flatbuffers.ByteBuffer, obj?:DiscoveryInfo):DiscoveryInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DiscoveryInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

splayDevices(index: number, obj?:SplayDevice):SplayDevice|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SplayDevice()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

splayDevicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDiscoveryInfo(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSplayDevices(builder:flatbuffers.Builder, splayDevicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, splayDevicesOffset, 0);
}

static createSplayDevicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSplayDevicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDiscoveryInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDiscoveryInfo(builder:flatbuffers.Builder, splayDevicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  DiscoveryInfo.startDiscoveryInfo(builder);
  DiscoveryInfo.addSplayDevices(builder, splayDevicesOffset);
  return DiscoveryInfo.endDiscoveryInfo(builder);
}
}
