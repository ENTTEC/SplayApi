// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Playlist } from '../splay-api/playlist.js';


export class GetAllPlaylistsRes {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetAllPlaylistsRes {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetAllPlaylistsRes(bb:flatbuffers.ByteBuffer, obj?:GetAllPlaylistsRes):GetAllPlaylistsRes {
  return (obj || new GetAllPlaylistsRes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetAllPlaylistsRes(bb:flatbuffers.ByteBuffer, obj?:GetAllPlaylistsRes):GetAllPlaylistsRes {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetAllPlaylistsRes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playlists(index: number, obj?:Playlist):Playlist|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Playlist()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playlistsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGetAllPlaylistsRes(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPlaylists(builder:flatbuffers.Builder, playlistsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playlistsOffset, 0);
}

static createPlaylistsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlaylistsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGetAllPlaylistsRes(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetAllPlaylistsRes(builder:flatbuffers.Builder, playlistsOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetAllPlaylistsRes.startGetAllPlaylistsRes(builder);
  GetAllPlaylistsRes.addPlaylists(builder, playlistsOffset);
  return GetAllPlaylistsRes.endGetAllPlaylistsRes(builder);
}
}
