// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SystemInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SystemInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSystemInfo(bb:flatbuffers.ByteBuffer, obj?:SystemInfo):SystemInfo {
  return (obj || new SystemInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSystemInfo(bb:flatbuffers.ByteBuffer, obj?:SystemInfo):SystemInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SystemInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cpuUsage():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

temperature():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

time():string|null
time(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
time(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSystemInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCpuUsage(builder:flatbuffers.Builder, cpuUsage:number) {
  builder.addFieldFloat32(0, cpuUsage, 0.0);
}

static addTemperature(builder:flatbuffers.Builder, temperature:number) {
  builder.addFieldFloat32(1, temperature, 0.0);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, timeOffset, 0);
}

static endSystemInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSystemInfo(builder:flatbuffers.Builder, cpuUsage:number, temperature:number, timeOffset:flatbuffers.Offset):flatbuffers.Offset {
  SystemInfo.startSystemInfo(builder);
  SystemInfo.addCpuUsage(builder, cpuUsage);
  SystemInfo.addTemperature(builder, temperature);
  SystemInfo.addTime(builder, timeOffset);
  return SystemInfo.endSystemInfo(builder);
}
}
